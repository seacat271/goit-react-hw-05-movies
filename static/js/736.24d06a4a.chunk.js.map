{"version":3,"file":"static/js/736.24d06a4a.chunk.js","mappings":"kPAEaA,E,QAAQC,GAAAA,IAAH,4C,SCiClB,EA5Ba,WACT,IAAMC,GAAUC,EAAAA,EAAAA,MAEhB,GAAeC,EAAAA,EAAAA,GADH,UACmBF,GAAxBG,GAAP,eAIA,IAAKA,EAAM,OAAO,KAElB,IAAOC,EAAQD,EAARC,KACP,OAAoB,IAAhBA,EAAKC,QAAqB,yEAE1B,wBACKD,EAAKE,KAAI,kBAAEC,EAAF,EAAEA,aAAcC,EAAhB,EAAgBA,KAAMC,EAAtB,EAAsBA,UAAWC,EAAjC,EAAiCA,GAAIC,EAArC,EAAqCA,OAArC,OACN,2BACI,SAACb,EAAD,CACAc,IAAKL,EAAe,mCAAqCA,EAA2B,IAAXI,EAAeE,EAAOC,EAC/FC,IAAK,mBAAW,CAACP,KAAAA,UAAZ,QAAqB,UAC1BQ,MAAM,MACNC,OAAO,SACP,uBAAIT,KACJ,uBAAIC,MAPGC,EADL,KAcrB,C,8HC/BDQ,IAAAA,SAAAA,QAAwB,+BAExB,IAAMC,EAAgB,CAClBC,OAAQ,CACJC,QALQ,mCAMRC,SAAU,UAILC,EAAO,mCAAG,WAAOC,EAAKJ,GAAZ,IAEVK,EAFU,0EAEVA,EAFU,WAGX,OAAQD,GACZ,IAAK,WACD,MAAM,GAAN,OAAUA,EAAV,kBAAuBJ,GAC3B,IAAK,SACD,MAAM,GAAN,OAAUI,EAAV,wBAA6BJ,GACjC,IAAK,UAEL,IAAK,UACD,MAAM,SAAN,OAAgBA,EAAhB,YAA0BI,GAE9B,QACI,MAAM,SAAN,OAAgBJ,GAG3B,EAjBsB,kBAmBIF,IAAAA,IAAUO,IAAeN,GAnB7B,cAmBbO,EAnBa,yBAoBZA,EAASvB,MApBG,yDAqBC,KAAMwB,SArBP,yDAAH,wDCTPzB,EAAa,SAACsB,EAAKC,GAC5B,OAAwBG,EAAAA,EAAAA,UAAS,MAAjC,eAAOzB,EAAP,KAAa0B,EAAb,KAQA,OANAC,EAAAA,EAAAA,YAAU,WACLL,GACDF,EAAQC,EAAKC,GACZM,KAAKF,EAET,GAAE,CAACL,EAAKC,IACF,CAACtB,EAAM0B,EACjB,C","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","helpers/getData.jsx","helpers/useGetData.jsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Image = styled.img`\nobject-fit: cover;\n`","import { useGetData } from \"helpers/useGetData\";\nimport { useOutletContext } from \"react-router-dom\";\nimport Male from \"../../placeholders/placeholder-male-612x612.jpg\";\nimport Female from \"../../placeholders/placeholder-female-612x612.jpg\"\nimport { Image } from \"./Cast.styled\";\n\n\nconst Cast = () => {\n    const movieId = useOutletContext()\n    const key = \"credits\"\n    const [data] = useGetData(key, movieId)\n \n\n  \n    if (!data) return null;\n \n    const {cast} = data\n    if (cast.length === 0) return <h1>We don't have any information about actors.</h1>\n    return (\n        <ul>\n            {cast.map(({profile_path, name, character, id, gender}) => \n                <li key = {id}>\n                    <Image \n                    src={profile_path ? \"https://image.tmdb.org/t/p/w185/\" + profile_path : (gender === 2 ? Male : Female)} \n                    alt={\"photo\" + ({name} ?? \"Noname\")} \n                    width=\"100\" \n                    height=\"150\"/>\n                    <p>{name}</p>\n                    <p>{character}</p>\n                </li>\n            )}\n        </ul>\n\n    )\n}\nexport default Cast;","import axios from \"axios\";\n\nconst API_KEY = \"4e997d9f74601693c84e243277b61d66\";\naxios.defaults.baseURL =\"https://api.themoviedb.org/3\";\n\nconst requestConfig = {\n    params: {\n        api_key: API_KEY,\n        language: \"en-US\",\n    },\n};\n\nexport const getData = async (key, params) => {\n\n    function queryParams () { \n            switch (key) {\n        case \"trending\": \n            return `${key}/movie/${params}`;\n        case \"search\": \n            return `${key}/movie?query=${params}`;\n        case \"credits\": \n            return `movie/${params}/${key}`;\n        case \"reviews\": \n            return `movie/${params}/${key}`;\n            \n        default:\n            return `movie/${params}`\n       \n    }\n}\ntry {\n    const response = await axios.get(queryParams(), requestConfig);\n    return response.data\n} catch(error) { return error.message}\n   \n \n}\n\n    \n\n\n\n","import { useState, useEffect } from \"react\";\nimport { getData } from \"./getData\";\n\nexport const useGetData = (key, queryParams) => {\n    const [data, setData] = useState(null);\n    \n    useEffect(()=>{\n    if (!queryParams) return\n        getData(key, queryParams)\n        .then(setData);\n    \n    }, [key, queryParams])\n    return [data, setData]\n}\n\n\n"],"names":["Image","styled","movieId","useOutletContext","useGetData","data","cast","length","map","profile_path","name","character","id","gender","src","Male","Female","alt","width","height","axios","requestConfig","params","api_key","language","getData","key","queryParams","response","message","useState","setData","useEffect","then"],"sourceRoot":""}